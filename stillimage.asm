; Display a still image on the NES. Assembles with ASM6.

; --- Constants ---------------------------------------------------------------

; RAM
pointer         equ $00  ; 2 bytes

; memory-mapped registers
ppu_ctrl        equ $2000
ppu_mask        equ $2001
ppu_status      equ $2002
oam_addr        equ $2003
ppu_scroll      equ $2005
ppu_addr        equ $2006
ppu_data        equ $2007
dmc_freq        equ $4010
oam_dma         equ $4014
snd_chn         equ $4015
joypad1         equ $4016
joypad2         equ $4017

; --- iNES header -------------------------------------------------------------

                ; see https://wiki.nesdev.org/w/index.php/INES
                base $0000
                db "NES", $1a            ; file id
                db 1, 1                  ; 16 KiB PRG ROM, 8 KiB CHR ROM
                db %00000001, %00000000  ; NROM mapper, vertical NT mirroring
                pad $0010, $00           ; unused

; --- External data -----------------------------------------------------------

                base $c000              ; last 16 KiB of CPU address space
                pad $f800, $ff          ; only use the last 2 KiB

ext_data        ; external data generated by png2nesdata.py
                incbin "prg.bin"
                pad ext_data+1024+256+4+1+1, $ff

                ; labels in external data
nt_at_data      = ext_data+0            ; name & attribute table
sprite_data     = ext_data+1024         ; sprites (must be page-aligned)
palette_data    = ext_data+1024+256     ; palette
hscroll         = ext_data+1024+256+4   ; horizontal scroll value
vscroll         = ext_data+1024+256+4+1 ; vertical   scroll value (1 byte)

; --- PRG ROM -----------------------------------------------------------------

reset           ; initialise the NES
                ; see https://wiki.nesdev.org/w/index.php/Init_code
                sei                     ; ignore IRQs
                cld                     ; disable decimal mode
                ldx #%01000000
                stx joypad2             ; disable APU frame IRQ
                ldx #$ff
                txs                     ; initialize stack pointer
                inx
                stx ppu_ctrl            ; disable NMI
                stx ppu_mask            ; disable rendering
                stx dmc_freq            ; disable DMC IRQs
                stx snd_chn             ; disable sound channels

                jsr wait_vbl_start      ; wait until next VBlank starts
                jsr wait_vbl_start      ; wait until next VBlank starts

                ldy #$3f                ; copy palette (while still in VBlank)
                lda #$00
                jsr set_ppu_addr        ; Y*$100+A -> address
                ldy #8
--              ldx #0
-               lda palette_data,x
                sta ppu_data
                inx
                cpx #4
                bne -
                dey
                bne --

                ldy #$3f                ; this should avoid a glitch
                lda #$00
                jsr set_ppu_addr        ; Y*$100+A -> address

                ldy #$20                ; copy NT0 & AT0 data ($400 bytes)
                lda #$00
                jsr set_ppu_addr        ; Y*$100+A -> address
                ;
                lda #<nt_at_data
                sta pointer+0
                lda #>nt_at_data
                sta pointer+1
                ldx #4                  ; how many pages to copy
                ldy #0
                ;
-               lda (pointer),y
                sta ppu_data
                iny
                bne -
                inc pointer+1
                dex
                bne -

                lda #$00                ; clear NT1 & AT1 ($400 bytes)
                tax
                ldy #4
-               sta ppu_data
                inx
                bne -
                dey
                bne -

                jsr wait_vbl_start      ; wait until next VBlank starts

                lda #hscroll
                sta ppu_scroll
                lda #vscroll
                sta ppu_scroll
                ; enable NMI on VBlank; use 8*16-px sprites;
                ; use PT0 for BG; use PT1 for sprites
                lda #%10101000
                sta ppu_ctrl
                lda #%00011110          ; show background and sprites
                sta ppu_mask

main_loop       jmp main_loop           ; an infinite loop

wait_vbl_start  bit ppu_status          ; wait until next VBlank starts
-               lda ppu_status
                bpl -
                rts

set_ppu_addr    sty ppu_addr            ; Y*$100+A -> address
                sta ppu_addr
                rts

nmi             bit ppu_status          ; NMI routine
                lda #$00
                sta oam_addr
                lda #>sprite_data       ; do OAM DMA from PRG ROM
                sta oam_dma
irq             rti                     ; IRQ routine (unused)

                pad $fffa, $ff          ; interrupt vectors (IRQ unused)
                dw nmi, reset, irq

; --- CHR ROM -----------------------------------------------------------------

                base $0000
                incbin "chr.bin"        ; generated by png2nesdata.py
                pad $1800, $ff          ; only 6 KiB actually used
                pad $2000, $ff
